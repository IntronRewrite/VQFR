name: train_vqgan_v2_B16_800K  # 训练任务的名称
model_type: VQGANModel         # 模型类型，使用的是VQGAN模型
scale: 1                       # 缩放因子
num_gpu: 0                     # 使用的GPU数量
manual_seed: 0                 # 随机种子，用于结果复现
syncbn: true                   # 是否使用同步批归一化

# 数据集和数据加载器设置
datasets:
  train:                       # 训练集配置
    name: IR                   # 数据集名称
    type: FFHQDataset          # 数据集类型
    dataroot_gt: datasets/train/norain  # 训练集的高质量数据路径
    io_backend:                # 数据加载方式
      type: disk               # 使用磁盘加载数据

    use_hflip: true            # 是否使用水平翻转数据增强
    mean: [0.5]                # 数据归一化的均值
    std: [0.5]                 # 数据归一化的标准差

    # 数据加载器
    use_shuffle: true          # 是否打乱数据
    num_worker_per_gpu: 1      # 每个GPU使用的线程数
    batch_size_per_gpu: 1      # 每个GPU的批量大小
    dataset_enlarge_ratio: 1   # 数据集扩展比例
    prefetch_mode: ~           # 数据预取模式

  val:                         # 验证集配置
    name: Val                  # 数据集名称
    type: PairedImageDataset   # 数据集类型
    dataroot_gt: datasets/val/norain  # 验证集的高质量数据路径
    dataroot_lq: datasets/val/rain    # 验证集的低质量数据路径
    io_backend:                # 数据加载方式
      type: disk               # 使用磁盘加载数据

    mean: [0.5]                # 数据归一化的均值
    std: [0.5]                 # 数据归一化的标准差

# 网络结构
network_g:                     # 生成器网络配置
  type: VQGANv2                # 生成器类型
  base_channels: 64            # 基础通道数
  channel_multipliers: [1,2,2,4,4,8]  # 通道数倍增因子
  num_enc_blocks: 2            # 编码器块数量
  use_enc_attention: true      # 编码器是否使用注意力机制
  num_dec_blocks: 2            # 解码器块数量
  use_dec_attention: true      # 解码器是否使用注意力机制
  code_dim: 256                # 编码维度
  quantizer_opt:               # 量化器配置
    type: L2VectorQuantizer    # 量化器类型
    num_code: 1024             # 码本数量
    code_dim: 256              # 码本维度
    spatial_size: [16,16]      # 空间尺寸

network_d:                     # 判别器网络配置
  type: StyleGAN2Discriminator # 判别器类型
  out_size: 512                # 输出尺寸
  channel_multiplier: 2        # 通道倍增因子
  resample_kernel: [1, 3, 3, 1] # 重采样核

# 路径配置
path:
  pretrain_network_g: ~        # 预训练生成器路径
  strict_load_g: true          # 是否严格加载生成器
  resume_state: ~              # 恢复训练的状态路径

# 训练设置
train:
  optim_g:                     # 生成器优化器配置
    type: Adam                 # 优化器类型
    lr: !!float 1e-4           # 学习率
    weight_decay: 0            # 权重衰减
    betas: [0.9, 0.96]         # Adam优化器的beta参数

  optim_d:                     # 判别器优化器配置
    type: Adam                 # 优化器类型
    lr: !!float 1e-4           # 学习率
    weight_decay: 0            # 权重衰减
    betas: [0.9, 0.96]         # Adam优化器的beta参数

  scheduler:                   # 学习率调度器配置
    type: MultiStepLR          # 调度器类型
    milestones: [500000, 650000] # 学习率下降的迭代数
    gamma: 0.5                 # 学习率下降的倍率

  total_iter: 1000           # 总训练迭代次数
  warmup_iter: -1              # 预热迭代次数（-1表示无预热）
  gan_start_iter: 500        # GAN训练开始的迭代数

  # 损失函数
  codebook_loss_weight: 1.0    # 码本损失权重

  pixel_opt:                   # 像素损失配置
    type: L1Loss               # 损失类型
    loss_weight: !!float 1.0   # 损失权重
    reduction: mean            # 损失归约方式

  perceptual_opt:              # 感知损失配置
    type: LPIPS                # 损失类型
    perceptual_weight: !!float 1.0 # 损失权重

  # GAN损失
  gan_opt:
    type: GANLoss              # 损失类型
    gan_type: wgan_softplus    # GAN类型
    loss_weight: !!float 1.0   # 损失权重

  r1_reg_weight: 10            # R1正则化权重
  net_d_reg_every: 16          # 判别器正则化间隔

# 验证设置
val:
  val_freq: !!float 5e3        # 验证频率
  save_img: true               # 是否保存验证图像

  metrics:                     # 验证指标
    psnr:                      # PSNR指标
      type: calculate_psnr     # 指标计算类型
      crop_border: 4           # 裁剪边界像素数
      test_y_channel: false    # 是否只测试Y通道

# 日志设置
logger:
  print_freq: 10              # 日志打印频率
  save_checkpoint_freq: !!float 5e3 # 保存检查点频率
  use_tb_logger: true          # 是否使用TensorBoard日志
  wandb:                       # Weights & Biases配置
    project: ~                 # 项目名称
    resume_id: ~               # 恢复ID

# 分布式训练设置
dist_params:
  backend: nccl                # 分布式训练后端
  port: 29500                  # 分布式训练端口
